[{"content":" 命令选项 --host=[hostname], -h[hostname]：指定 MySQL 服务器的主机名 --user=[username], -u[username]：指定 MySQL 服务器的用户名 --password=[password], -p[password]：指定 MySQL 服务器的密码 --port=[port], -P[port]：指定 MySQL 服务器的端口号 --protocol=[TCP|SOCKET|PIPE|MEMORY]：指定 MySQL 服务器的连接协议，localhost 默认使用 unix 套接字： 1 mysql --host=localhost 如何要强制使用 TCP 连接，指定 --protocol=TCP： 1 mysql --host=localhost --protocol=TCP 下面是 --protocol 选项值及适用平台： 选项 传输协议 适用平台 TCP 到本地或远程服务器的 TCP/IP 传输 所有平台 SOCKET Unix 套接字传输到本地服务器 Unix 平台 PIPE 命名管道传输到本地服务器 Windows 平台 MEMORY 共享内存到本地服务器 Windows 平台 连接到 MySQL 服务器 localhost 在不指定任何选项的情况下，调用 mysql 命令：\n1 mysql 上面的命令包含以下默认选项：\n使用默认的主机名 localhost 使用默认的用户名 root 未指定密码 使用默认的端口号 3306 执行上面的命令后会返回：\n1 ERROR 1045 (28000): Access denied for user \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; (using password: NO) 跟下面的命令等价：\n1 2 mysql -h localhost -u root ERROR 1045 (28000): Access denied for user \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; (using password: NO) 使用完整的选项连接到 MySQL 服务器：\n1 mysql --host=localhost --user=root --port=3306 --password 123456 在 Unix 上，MySQL 会对 localhost 使用 Unix 套接字连接，可使用 --socket 选项指定套接字文件。\nprotocol 使用 --protocol 选项指定连接协议，即使指定了 --host=localhost，也会覆盖前面的规则。 示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 sh-4.4# mysql -h localhost -u root --protocol=TCP -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 40 Server version: 8.3.0 MySQL Community Server - GPL Copyright (c) 2000, 2024, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement. mysql\u0026gt; 如果未使用 --protocol 选项，localhost 默认使用 Unix 套接字连接，即使使用 --port 来指定端口号。 示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 sh-4.4# mysql -h localhost -u root -P1111 -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 41 Server version: 8.3.0 MySQL Community Server - GPL Copyright (c) 2000, 2024, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement. mysql\u0026gt; 如果要使用 TCP 连接，有以下两种方式：\n使用 --host 或 -h 指定主机 IP 值 127.0.0.1 使用 --protocol=TCP 指定连接协议 示例如下：\n1 2 mysql --host=127.0.0.1 mysql --protocol=TCP 指定端口号强制建立 TCP/IP 连接，下面两种方式皆可：\n1 2 mysql --host=127.0.0.1 --port=13306 mysql --protocol=TCP --port=13306 ","date":"2024-06-19T16:57:41+08:00","image":"https://stridedot.github.io/p/mysql-connecting/MySQL-Logo.wine_hu07b159bcfc8e2c4da17d54f1731b5ada_39031_120x120_fill_box_smart1_3.png","permalink":"https://stridedot.github.io/p/mysql-connecting/","title":"使用命令行连接到 MySQL"},{"content":" WebSocket 提供了全双工通道形式，允许服务器和客户端之间进行双向通信。这意味着不但客户端可以向服务端发送消息，同时服务端也可以向服务器发送消息。\nWebSocket 通常用于\n实时聊天工具 实时游戏 实时协作工具 \u0026hellip;\u0026hellip; 但对于很多 web 程序来说，WebSocket 可能过大。比如，客户端需要实时更新会员中心页的通知数量，不需要双向通信。这时，只需要由服务端向客户端发送消息即可，这个技术就是：SSE。\n什么是 SSE SSE(Server-Sent Events)使用的是基于 HTTP 的协议。严格来讲，HTTP 协议是无法做到服务器主动推送消息的。但凡事都有例外，就是服务器向客户端声明发送的是数据流。\n1 Content-Type:text/event-stream 也就是说，服务端发送的并不是一次性的数据包，而是不间断的数据流。只要有数据，服务端会源源不断的向客户端发送数据，直到客户端关闭连接。\n这种通信是以流的形式来通信，视频播放即是这种形式。\nSSE 利用这种机制向浏览器推送消息。目前除了IE浏览器，基本上所有的浏览器都支持。\n与 WebSocket 的区别 SSE 提供单向通信，WebSocket 提供双向通信 SSE 基于 HTTP 协议，WebSocket 基于单独的协议（WebSocket 协议） SSE 只能传输文本，WebSocket 支持二进制和文本传输 SSE 不支持通信加密，WebSocket 支持加密通信（TLS/SSL） SSE 有最大连接数限制，WebSocket 协议本身吴最大连接数的限制 SSE 支持重连，WebSocket 需要自己实现 SSE 的特点 通过单个 HTTP 长连接推送消息，无需轮询 使用轻量级的文本格式（JSON）,减少不必要的资源消耗 浏览器普遍支持 实现简单 数据格式 请求头 服务端向浏览器发送的 SSE 数据，必须是 UTF-8 编码的文本，必须包含以下 HTTP 请求头：\n1 2 3 Content-Type: text/event-stream Cache-Control: no-cache Connection: keep-alive 消息体 SSE 的消息体格式如下：\n1 [field]: [value]\\n field 可以是以下四个值：\nid event data retry id 字段\nid 相当于每一条数据的编号。\n1 id: 123124\\n 如果发生断连，浏览器会将 id 放到 Last-Event-Id 中进行重连来作为以重简单的同步机制。\nevent 字段\nevent 表示自定义的事件类型，如果忽略，默认是 message 。浏览器可以用 addEventListener() 来监听该事件。\n1 2 3 4 event: foo\\n data: a foo event\\n\\n data: a default event\\n\\n 以上代码实现了 2 条信息。\n第一条的事件名称是 foo，第二条没有指定事件，触发浏览器的 message 事件。\ndata 字段\n消息数据，以文本的形式发送。格式：\n1 data: hello world\\n\\n 如果以 \\n\\n 为结尾，表示一条完整的数据消息。\n多行数据可以以 \\n 为结尾，如下发送一条 JSON 数据：\n1 2 3 4 data: {\\n data: \u0026#34;name\u0026#34;: \u0026#34;张三\u0026#34;,\\n data: \u0026#34;age\u0026#34;, 25\\n data: }\\n\\n retry 字段\n服务端可以用 retry 来指定浏览器重新发起连接的时间间隔。单位毫秒\n1 retry: 2000\\n 以上代码表示浏览器间隔 2 秒重新发起连接。\n如果 retry 的值不是整数，则会被忽略。\n浏览器会发起重连的原因：\n时间间隔到期 网络错误 SSE 实战 接下来我们完成一个简单示例来进一步了解 SSE 的用法。\n用户在刊登楼盘的时候，需要上传跟楼盘相关的图片。\n用户一般是用手机拍摄的图片，如果要求从 PC 浏览器上传，就需要用户从手机端将图片传输到 PC，这就增加了用户的工作量，会让用户感到很不方便。\n于是，我们需要实现一个功能，使用户能够从手机端上传图片，同时 PC 浏览器也能同步显示用户上传的图片。\n具体流程 1、用户进入刊登页面，显示上传图片二维码\n2、用户用手机照相机扫二维码后，会跳转到手机浏览器\n3、用户在手机浏览器上传图片\n4、PC 浏览器端同步显示该图片\n服务端实现 服务端我们用 Go 语言，kratos 框架实现，。\n定义支持 SSE 的 header 头：\n1 2 3 4 // 設置頭部，告訴瀏覽器這是一個 SSE 流 w.Header().Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;text/event-stream\u0026#34;) w.Header().Set(\u0026#34;Cache-Control\u0026#34;, \u0026#34;no-cache\u0026#34;) w.Header().Set(\u0026#34;Connection\u0026#34;, \u0026#34;keep-alive\u0026#34;) 实例化一个 messageChan 的通道变量。向客户端发送的消息将通过此通道传递。\n1 2 // 建立一個消息通道 messageChan := make(chan string, 1) 创建一个协程，向 messageChan 通道中发送数据\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 go func () { timeout := time.After(30 * time.Minute) defer func() { // 關閉消息通道 close(messageChan) messageChan = nil }() for { images, err := s.imageUC.GetImagesByIdentifier(ctx, memberID, identifier) if err != nil { s.logger.Errorf(\u0026#34;getImages error: %v\u0026#34;, err) return } if images == nil { return } var buf bytes.Buffer _ = json.NewEncoder(\u0026amp;buf).Encode(images) select { case messageChan \u0026lt;- buf.String(): case \u0026lt;-timeout: return } time.Sleep(time.Second) } } 循环读取通道中的数据，messageChan 持续等待并接收数据。如果消息可用，那么它将写入到 http.ResponseWriter 中，同时刷新消息。\n如果客户端关闭连接，Context().Done() 会给出一个关闭信号，我们就可以退出循环（退出函数）。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 flusher, _ := w.(kratosHttp.Flusher) for { select { case message, ok := \u0026lt;-messageChan: if !ok { return nil } // 向客戶端發送事件 event = fmt.Sprintf(\u0026#34;event: %s\\n\u0026#34;, event) message = fmt.Sprintf(\u0026#34;data: %s\\n\u0026#34;, message) retry := \u0026#34;retry: 2000\\n\u0026#34; _, _ = fmt.Fprintf(w, \u0026#34;%s%s%s\\n\u0026#34;, event, retry, message) flusher.Flush() case \u0026lt;-ctx.Request().Context().Done(): return nil } } 完整代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 // RegisterSSESvcServers register SSE. func RegisterSSESvcServers(s *kratosHttp.Server, srv *SSEService) { s.Route(\u0026#34;/v1\u0026#34;).GET(\u0026#34;/api/sse/events\u0026#34;, srv.events) } func (s *SSEService) events(ctx kratosHttp.Context) error { r := ctx.Request() w := ctx.Response() memberID, err := strconv.ParseUint(r.URL.Query().Get(\u0026#34;member_id\u0026#34;), 10, 32) if err != nil { _ = JsonRes(constant.StatusParamError, \u0026#34;請傳遞member_id\u0026#34;)(w, r, nil) return nil } identifier := r.URL.Query().Get(\u0026#34;identifier\u0026#34;) if identifier == \u0026#34;\u0026#34; { _ = JsonRes(constant.StatusParamError, \u0026#34;請傳遞identifier\u0026#34;)(w, r, nil) return nil } event := r.URL.Query().Get(\u0026#34;event\u0026#34;) if event == \u0026#34;\u0026#34; { _ = JsonRes(constant.StatusParamError, \u0026#34;請傳遞event\u0026#34;)(w, r, nil) return nil } // 建立一個消息通道 messageChan := make(chan string, 1) go s.getMessage(ctx, messageChan, uint32(memberID), identifier) // 設置頭部，告訴瀏覽器這是一個 SSE 流 w.Header().Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;text/event-stream\u0026#34;) w.Header().Set(\u0026#34;Cache-Control\u0026#34;, \u0026#34;no-cache\u0026#34;) w.Header().Set(\u0026#34;Connection\u0026#34;, \u0026#34;keep-alive\u0026#34;) // 準備 flusher flusher, _ := w.(kratosHttp.Flusher) for { select { case message, ok := \u0026lt;-messageChan: if !ok { return nil } // 向客戶端發送事件 event = fmt.Sprintf(\u0026#34;event: %s\\n\u0026#34;, event) message = fmt.Sprintf(\u0026#34;data: %s\\n\u0026#34;, message) retry := \u0026#34;retry: 2000\\n\u0026#34; _, _ = fmt.Fprintf(w, \u0026#34;%s%s%s\\n\u0026#34;, event, retry, message) flusher.Flush() case \u0026lt;-ctx.Request().Context().Done(): return nil } } } func (s *SSEService) getMessage( ctx kratosHttp.Context, messageChan chan\u0026lt;- string, memberID uint32, identifier string, ) { timeout := time.After(30 * time.Minute) defer func() { // 關閉消息通道 close(messageChan) messageChan = nil }() for { images, err := s.imageUC.GetImagesByIdentifier(ctx, memberID, identifier) if err != nil { s.logger.Errorf(\u0026#34;getImages error: %v\u0026#34;, err) return } if images == nil { return } var buf bytes.Buffer _ = json.NewEncoder(\u0026amp;buf).Encode(images) select { case messageChan \u0026lt;- buf.String(): case \u0026lt;-timeout: return } time.Sleep(time.Second) } } js 实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;SSE test\u0026lt;/title\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; window.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function () { var evsrc = new EventSource(\u0026#34;http://go.dev.591.com.hk:8084/v1/api/sse/events?event=upload_by_qr\u0026amp;member_id=1\u0026amp;identifier=efabcoxe\u0026#34;); evsrc.addEventListener(\u0026#34;upload_by_qr\u0026#34;, function (ev) { console.log(\u0026#34;Received upload_by_qr event: \u0026#34; + ev.data); document.getElementById(\u0026#34;log\u0026#34;).insertAdjacentHTML(\u0026#34;beforeend\u0026#34;, \u0026#34;\u0026lt;li\u0026gt;\u0026#34; + ev.data + \u0026#34;\u0026lt;/li\u0026gt;\u0026#34;); }); evsrc.onerror = function (ev) { console.log(\u0026#34;readyState = \u0026#34; + ev.currentTarget.readyState); }; }) \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;SSE test\u0026lt;/h1\u0026gt; \u0026lt;div\u0026gt; \u0026lt;ul id=\u0026#34;log\u0026#34;\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; SSE 测试 1、启动服务\n1 2 INFO ts=2024-01-23T14:18:47+08:00 caller=http/server.go:317 service.id=addcn-taiwan.meta.juicefs.io service.name=house_release service.version= trace.id= span.id= msg=[HTTP] server listening on: [::]:8084 INFO ts=2024-01-23T14:18:47+08:00 caller=grpc/server.go:212 service.id=addcn-taiwan.meta.juicefs.io service.name=house_release service.version= trace.id= span.id= msg=[gRPC] server listening on: [::]:9094 2、访问 html 页面\n","date":"2024-01-24T20:32:07+08:00","image":"https://stridedot.github.io/p/go-sse/sse_hub20de7200eadae8c2851bb2c08fb8e41_89131_120x120_fill_box_smart1_3.png","permalink":"https://stridedot.github.io/p/go-sse/","title":"Go SSE"},{"content":" Go-Kit 介绍 Go Kit 并不是一个框架而是一个包的集合。它可以帮助我们构建健壮、可靠、可维护的微服务，这点在生产环境中已得到验证。所以对于想要实现一个简洁架构的 Go 开发者来说，了解 Go Kit 包是非常必要的。\n关键概念 Go Kit 构建的服务可以分为三层：\nTransport (传输层) Endpoint (端点层) Service (服务层) Transport\n通信协议：提供多种传输协议的支持，包括 HTTP、gRPC、JSON-RPC、CLI 等。\n数据编码：负责将数据在服务之间进行编码和解码。不同的通信协议需要不同的编解码方式。\nEndpoint\n端点：是 Service 层的入口，对 Service 进行 wrapper。它是定义输入和输出定义用例的地方，用简洁架构术语来说，就是处理请求-\u0026gt;调用 Service-\u0026gt;返回响应。\n请注意，端点是一个接收请求并返回响应的函数，它们都是 interface{}，即 RequestModel 和 ResponseModel。理论上它也可以用类型参数（泛型）来实现。 config 中间件：通过一组中间件来组合和包装端点，实现例如日志记录、认证、限流等功能\nService\nService 层是实现所有业务逻辑的地方。服务不了解端点，端点和服务都不了解传输域。\nService 有多个 Endpoint 组成，每个 Endpoint 代表了一个具体功能。\n简单示例 我们通过一个简单的微服务示例来加深对 Go-Kit 的理解。\n假设我们要完成一个打招呼的功能，具体源码可以看 Go-Kit http 微服务示例。\n文件结构如下：\n1 2 3 4 5 6 7 8 9 |-sample |-endpoint/ |-endpoint.go |-service/ |-service.go |-transport/ |-transport.go |-go.mod |-main.go endpoint: 端口层 service: 业务逻辑层 transport: 传输层 服务层 服务层的代码非常简单：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package service type IServer interface { Hello(name string) string Bye(name string) string } type Server struct { } func (s Server) Hello(name string) string { return \u0026#34;Hello \u0026#34; + name } func (s Server) Bye(name string) string { return \u0026#34;Bye \u0026#34; + name } 如 Go Kit 所建议的，第一步是为我们的服务创建一个接口，接口有 2 个方法 Hello() 和 Bye() 。Server 结构体实现了这个接口。\n另外，从这里我们可以看出，一个服务是可以有多个端点的，端点的代码稍后展示。\n端点层 服务层定义了 Hello() 和 Bye() 两个方法，如果要调用这两个方法，我们需要创建两个端点。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 package endpoint import ( \u0026#34;context\u0026#34; \u0026#34;sample/service\u0026#34; \u0026#34;github.com/go-kit/kit/endpoint\u0026#34; ) // Package // Imports // Types // Constants AND Var // Type Methods // type Endpoint func(ctx context.Context, request interface{}) (interface{}, error) type HelloRequest struct { Name string `json:\u0026#34;name\u0026#34;` } type HelloResponse struct { Msg string `json:\u0026#34;msg\u0026#34;` } type ByeRequest struct { Name string `json:\u0026#34;name\u0026#34;` } type ByeResponse struct { Msg string `json:\u0026#34;msg\u0026#34;` } func MakeHelloEndpoint(s service.IServer) endpoint.Endpoint { return func(ctx context.Context, request interface{}) (interface{}, error) { req := request.(HelloRequest) msg := s.Hello(req.Name) return HelloResponse{Msg: msg}, nil } } func MakeByeEndpoint(s service.IServer) endpoint.Endpoint { return func(ctx context.Context, request interface{}) (interface{}, error) { req := request.(ByeRequest) msg := s.Bye(req.Name) return ByeResponse{Msg: msg}, nil } } endpoint.go 文件中，我们分别定义了 Hello 和 Bye 的请求体和返回响应体。\n同时我们也定义了 MakeHelloEndpoint() 和 MakeByeEndpoint() 两个函数，目的是将传输层的请求体转为服务层能够识别的结构体，并返回响应。\n端点层对传输层一无所知，无论是哪种传输协议，都没有区别。\nendpoint.Endpoint 定义如下：\n1 type Endpoint func(ctx context.Context, request interface{}) (response interface{}, err error) 传输层 在这一层中，我们可以有多种实现，如 HTTP, gRPC, AMPQ 等。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package transport import ( \u0026#34;context\u0026#34; \u0026#34;encoding/json\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;sample/endpoint\u0026#34; ) func HelloRequestDecoder(_ context.Context, r *http.Request) (interface{}, error) { var request endpoint.HelloRequest err := json.NewDecoder(r.Body).Decode(\u0026amp;request) return request, err } func HelloResponseEncoder(_ context.Context, w http.ResponseWriter, response interface{}) error { w.Header().Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;) return json.NewEncoder(w).Encode(response) } func ByeRequestDecoder(_ context.Context, r *http.Request) (interface{}, error) { var request endpoint.ByeRequest err := json.NewDecoder(r.Body).Decode(\u0026amp;request) return request, err } func ByeResponseEncoder(_ context.Context, w http.ResponseWriter, response interface{}) error { w.Header().Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;) return json.NewEncoder(w).Encode(response) } transport.go 文件分别定义了 Hello 和 Bye 的请求和响应的编解码函数。\n目的是将传输层中的数据解析到端点层的结构体，将从端点层返回的结构体解析到传输层。\nmain main.go 文件中，我们将使用所有层：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;sample/endpoint\u0026#34; \u0026#34;sample/service\u0026#34; \u0026#34;sample/transport\u0026#34; \u0026#34;time\u0026#34; httpTransport \u0026#34;github.com/go-kit/kit/transport/http\u0026#34; ) func main() { s := service.Server{} // 调用端点层 hello := endpoint.MakeHelloEndpoint(s) bye := endpoint.MakeByeEndpoint(s) // 实例化 http 服务 helloServer := httpTransport.NewServer( hello, transport.HelloRequestDecoder, transport.HelloResponseEncoder, ) byeServer := httpTransport.NewServer( bye, transport.ByeRequestDecoder, transport.ByeResponseEncoder, ) // 开启 2 个协程监听端口 hello 和 bye 服务 go func() { err := http.ListenAndServe(\u0026#34;:8081\u0026#34;, helloServer) if err != nil { panic(err) } }() go func() { err := http.ListenAndServe(\u0026#34;:8082\u0026#34;, byeServer) if err != nil { panic(err) } }() for { time.Sleep(time.Second) fmt.Println(11111) } } 运行 1 2 3 4 $ curl -s -XPOST -d\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;Anna\u0026#34;}\u0026#39; localhost:8080/hello {\u0026#34;msg\u0026#34;:\u0026#34;Hello Anna\u0026#34;} $ curl -s -XPOST -d\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;Anna\u0026#34;}\u0026#39; localhost:8080/bye {\u0026#34;msg\u0026#34;:\u0026#34;Bye Anna\u0026#34;} 参考：Microservices in Go using the Go kit\n","date":"2023-12-17T12:19:46+08:00","image":"https://stridedot.github.io/p/go-kit-http/go-kit-layer_hub9b6c2f0d9dbb8b63bb835bb6dccc671_38338_120x120_fill_q75_box_smart1.jpg","permalink":"https://stridedot.github.io/p/go-kit-http/","title":"Go Kit Http"},{"content":" 概要 封面图来自Get Your Hands Dirty on Clean Architecture\n简洁架构是一种软件设计原则，它的目标在于创造易于理解、可维护和可测试的软件系统。它的关注点在于职责分离，同时也能够兼容系统的可扩展性。\n简洁架构根据职责分了几个层次，原文给出了一个突出显示各层的图表：\n下面的内容主要是围绕这几个层次展开。而且我们将以用户在商城购物的例子来实现一个用例，来进一步熟悉简洁架构。\n简洁架构 简洁架构将系统划分为以下几个层次。\n领域层（Domain Layer） 虽然图中最内层给出的是实体层（Entities），但我认为还应当包含数据转换的部分，所以这一层应当是领域层。\n领域层包含系统的核心业务实体和数据，以及用于转换数据的代码。\n实体层，你可以认为实体是我们在改变一些用例或应用时不会改变的东西。\n在商城的案例中，这些实体是产品、订单、用户、购物车，以及增删改查其数据的功能。\n将商品添加到购物车的函数并不关心该物品是如何添加的：或是用户自己点击”购买“添加，亦或是通过促销代码自动添加。这两种情况，你都会看到更新商品后的购物车。\n应用层（Application Layer） 应用层包含用例（Use Cases），而用例是每一个业务场景的实现。用例用于和领域层交互。\n例如，”添加到购物车”场景是一个用例。它描述了请求被发送到服务端后应当采取的操作。\n接口适配器层（Interface Adapters） 适配器层是应用层和基础架构的桥梁，它负责将领域层的数据格式适配于外部界面的格式，同时也与基础架构进行交互。\n例如，如果要处理一个请求并响应，就需要适配器处理成方便用例和实体理解的格式（比如 json），然后从实体和用例获取输出，再处理成请求源能够识别的形式。\n基础架构（Infrastructure） 包含所有的 I/O 组件：UI、数据库、框架、设备等，是最易变化的层。\n依赖规则 简洁架构只有一个依赖规则：只有外层可以依赖内层。这意味着：\n领域必须是独立的 用例层依赖实体 外层可以依赖任何东西 当然这个规则是可以违反的。我们经常看到在领域层依赖第三方库。\n但不受控制的依赖关系会导致复杂和混乱的代码，如打破以来规则会导致：\n循环依赖，模块 A 依赖模块 B，B 依赖 C，C 依赖 A 测试性差，必须模拟整个系统来测试一小部分 耦合度太高 简洁架构的优势 领域分离\n每个领域的功能是独立，与应用层的耦合度变低，更易维护和测试。\n独立用例\n应用场景即用例是单独描述的。在用例中可以决定使用哪些第三方服务，即使更换第三方服务，也不会影响到其他层。\n可替换的三方服务\n由于适配器的存在，更换第三方服务变的简单。只要实现了适配器的接口，即可调用这个服务。\nMVC 类比 通常，没有了解过 DDD 领域驱动 的人都这些层次划分会很模糊，那么做一个 MVC 与简洁架构的类比会很有帮助：\n模型（Model）通常对应的是领域实体 控制器（Controller）通常对应的是应用层。 视图（View）通常对应的是适配器 虽然细节上有所不同，但大体类似。这种类比可以快速帮助理解分层的意义。\n应用设计 我们的购物系统与各大商城类似。对于商城的设计，我们只关注主要部分：用户、商品、购物车和订单，而忽略次要部分：登录、校验和操作细节。\n想象一下，如果我们要买一副羽毛球拍，需要经历以下步骤：\n用户加入购物车 提交结算 生成未支付订单 支付完成 更新为已支付订单 删除购物车 设计领域 程序中最重要的是领域，它包含了应用程序的主要实体和数据转换。\n商城领域一般包含：\n实体数据：user, cart, order, product 数据的转换函数 转换函数只依赖于领域，比如：\n计算总成本的函数 检测产品库存 检查是否在购物车中 简要的领域设计如下图\n设计应用层 应用层包含用例。一个用例通常会有一个行为者（actor）或用户、一个动作（action）和一个响应。\n在这个商城中，我们可以将应用层区分为以下一个几个用例：\n商品购买场景 调用第三方支付场景 查看订单场景 用例通常以主题领域（subject area）的方式描述，其中商品购买场景有以下步骤：\n从购物车中检索商品并创建一个新的订单 订单付款 更新订单 通知用户 清除购物车 设计适配器层 适配器的作用是使第三方服务和我们的系统兼容。\n在服务端，适配器通常是数据库的连接、支付方式的调用、邮件的通知。\n系统设计结构 domain 是领域层\napplication 是应用层\nservices 是适配器层\n结构如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 architecture/ |-domain/ |-cart.go |-order.go |-user.go |-product.go |-application/ |-cart.go |-interface.go |-order.go |-orderProduct.go |-services/ |-notificationAdapter.go |-paymentAdapter.go 创建领域实体 领域中有 4 个模块：\n用户 产品 购物车 订单 用户是行为者，用户的实体包括：用户ID、姓名、邮箱等\n1 2 3 4 5 6 7 8 // domian/user.go package domain type User struct { ID int64 `json:\u0026#34;id\u0026#34;` Username string `json:\u0026#34;username\u0026#34;` Email string `json:\u0026#34;email\u0026#34;` } 产品包括：产品ID、名称、价格等\n1 2 3 4 5 6 7 8 // domain/product.go package domain type Product struct { ID int64 `json:\u0026#34;id\u0026#34;` Name string `json:\u0026#34;name\u0026#34;` Price int64 `json:\u0026#34;price\u0026#34;` } 购物车包括：ID、用户ID、产品信息\n1 2 3 4 5 6 7 8 // domain/cart.go package domain type Cart struct { ID int64 `json:\u0026#34;id\u0026#34;` UserID int64 `json:\u0026#34;user_id\u0026#34;` Products []*Product `json:\u0026#34;products\u0026#34;` } 订单包括：订单ID、用户ID、产品信息、状态\n1 2 3 4 5 6 7 8 9 // domain/order.go package domain type Order struct { ID int64 `json:\u0026#34;id\u0026#34;` UserID int64 `json:\u0026#34;user_id\u0026#34;` Products []*Product `json:\u0026#34;products\u0026#34;` Status int64 `json:\u0026#34;status\u0026#34;` } 创建数据转换 注意：以下只是代码的简写，与业务无关。\n购物车实体的 Contains 和 AddProduct 用于检查物品是否在购物车中和向购物车添加商品。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 func (c *Cart) Contains(product Product) (bool, error) { for _, p := range c.Products { if p.ID == product.ID { return true, nil } } return false, nil } func GetCart(userID int64) (Cart, error) { return Cart{}, nil } func (c *Cart) AddProduct(product Product) (bool, error) { has, _ := c.Contains(product) if has { c.Products = append(c.Products, product) } else { // 有就更新 for i, p := range c.Products { if p.ID == product.ID { c.Products[i] = product } } } return true, nil } 计算商品列表的总价格\n1 2 3 4 5 6 7 8 // domain/product.go func TotalPrice(products []*Product) int64 { var totalPrice int64 for _, product := range products { totalPrice += product.Price } return totalPrice } 创建订单：\n1 2 3 4 5 6 7 8 // domain/order.go func CreateOrder(user *User, products []*Product) (Order, error) { var order Order order.UserID = user.ID order.TotalPrice = TotalPrice(products) order.Status = 0 return order, nil } 创建应用层 我们已经创建了领域层，接下来可以创建应用层了。\n在订单方面，我们需要传递用户信息和产品信息，将两者绑定：\n1 2 3 4 5 6 7 8 // application/orderProduct.go package application import ( \u0026#34;clean/domain\u0026#34; ) type OrderProducts func(*domain.User, []*domain.Product) (*domain.Order, error) 正常情况下，不应当采用两个单独的参数，而应当将所有的参数封装在内部，这个情况在实际的业务开发中要注意。\n购物车方面，在用户执行添加到购物车操作时，有以下步骤：\n获取购物车 检查购车是否已该商品 更新购物车 1 2 3 4 5 6 7 8 9 10 // application/cart.go func AddToCart(userID int64, productID int64) (bool, error) { var product domain.Product product.ID = productID cart, _ := domain.GetCart(userID) _, _ = cart.AddProduct(product) return true, nil } 生成一个订单：\n1 2 3 4 5 6 func CreateOrder(user *domain.User) (*domain.Order, error) { cart, _ := domain.GetCart(user.ID) order, _ := domain.CreateOrder(user, cart.Products) return \u0026amp;order, nil } 支付和发送通知接口：\n1 2 3 4 5 6 7 8 9 10 // application/interface.go import \u0026#34;clean/domain\u0026#34; func Pay(order *domain.Order) { services.Pay(order.TotalPrice) } func Notify(user *domain.User, message string) { services.SendEmail(user.Email, message) } 创建适配器 支付服务接口：\n1 2 3 4 // services/paymentAdapter.go func Pay(price int64) { // request Payment Server } 通知服务接口：\n1 2 3 4 // services/paymentAdapter.go func SendEmail(email, message string) { // request Mail Server } 数据流程图 用户请求到应用层，应用层会自动调用外部服务。主要逻辑和数据都在领域层中。\n所有的外部服务都隐藏在基础架构中，如果我们需要修改消息发送方式，只需要修改适配器即可。\n总结 本文介绍了简洁架构的分层、与 MVC 开发模式的概念替换以及一个基本满足简洁架构的应用设计。\n实际项目中的情况会更复杂，最主要的问题是我们对领域的了解不足。判断模块属于哪一层非常重要，关注点在于职责分离。\n本文参考转文：【译】前端简洁架构\n参考： Public Talk about Clean Architecture on Frontend Slides for the Talk The source code for the application we\u0026rsquo;re going to design Sample of a working application 设计实践 The Clean Architecture Model-View-Controller DDD, Hexagonal, Onion, Clean, CQRS, … How I put it all together Ports \u0026amp; Adapters Architecture More than Concentric Layers Generating Trees Using L-Systems, TypeScript, and OOP Series\u0026rsquo; Articles 系统设计 Domain Knowledge Use Case Coupling and cohesion Shared Kernel Analysis Paralysis ","date":"2023-12-10T11:02:05+08:00","image":"https://stridedot.github.io/hexagonal-architecture.png","permalink":"https://stridedot.github.io/p/clean-architecture/","title":"简洁架构"},{"content":"Hugo 是个用于构建静态网站的快速、现代且灵活的开源静态站点生成器。 它使用 Go 语言编写，以极快的速度生成静态网页，支持简单易懂的文件结构、主题和模板。 Hugo 注重性能，使得用户能够在几秒内生成整个网站，它会将你使用 markdown 编写的内容转换成 HTML 文件。 适用于用于个人博客和企业网站。\nStep 1: Fork hugo 进入 hugo 页面，点击 fork，hugo 项目将同步到自己的 github 账户中。\nStep 2: Git Clone 执行 git clone 命令\n1 $ git clone https://gitclone.com/github.com/stridedot/hugo.git --depth=1 如果 clone 比较慢，可以在修改\nhttps://github.com/stridedot/hugo.git --depth=1\n为\nhttps://gitclone.com/github.com/stridedot/hugo.git --depth=1\n来加快下载速度\nStep 3: 安装依赖 进入 hugo 文件并 install\n1 2 $ cd hugo $ go install Step 4: 编译 1 $ go build -o D:/software/Hugo/bin/hugo.exe main.go Step 5: 加入环境变量 点击开始菜单，搜索“环境变量”即可看到\n我们的 hugo 可执行文件是 D:/software/Hugo/bin/hugo.exe 。\nStep 6: 测试 hugo 1 2 $ hugo version hugo v0.121.0-DEV windows/amd64 BuildDate=unknown ","date":"2022-11-09T00:00:00Z","permalink":"https://stridedot.github.io/p/install-hugo/","title":"hugo 的安装与使用"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://stridedot.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://stridedot.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://stridedot.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://stridedot.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode Vimeo Simple Shortcode bilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","permalink":"https://stridedot.github.io/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://stridedot.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://stridedot.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://stridedot.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://stridedot.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://stridedot.github.io/p/emoji-support/","title":"Emoji Support"}]