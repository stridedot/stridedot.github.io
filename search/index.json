[{"content":" 概要 封面图来自Get Your Hands Dirty on Clean Architecture\n简洁架构是一种软件设计原则，它的目标在于创造易于理解、可维护和可测试的软件系统。它的关注点在于职责分离，同时也能够兼容系统的可扩展性。\n简洁架构根据职责分了几个层次，原文给出了一个突出显示各层的图表：\n下面的内容主要是围绕这几个层次展开。而且我们将以用户在商城购物的例子来实现一个用例，来进一步熟悉简洁架构。\n简洁架构 简洁架构将系统划分为以下几个层次。\n领域层（Domain Layer） 虽然图中最内层给出的是实体层（Entities），但我认为还应当包含数据转换的部分，所以这一层应当是领域层。\n领域层包含系统的核心业务实体和数据，以及用于转换数据的代码。\n实体层，你可以认为实体是我们在改变一些用例或应用时不会改变的东西。\n在商城的案例中，这些实体是产品、订单、用户、购物车，以及增删改查其数据的功能。\n将商品添加到购物车的函数并不关心该物品是如何添加的：或是用户自己点击”购买“添加，亦或是通过促销代码自动添加。这两种情况，你都会看到更新商品后的购物车。\n应用层（Application Layer） 应用层包含用例（Use Cases），而用例是每一个业务场景的实现。用例用于和实体层交互。\n例如，”添加到购物车”场景是一个用例。它描述了请求被发送到服务端后应当采取的操作。\n对于 MVC 架构，应用层相当于控制器层+业务逻辑层。\n接口适配器层（Interface Adapters） 适配器层是应用层和基础架构的桥梁，它负责将领域层的数据格式适配于外部界面的格式，同时也与基础架构进行交互。\n例如，如果要处理一个请求并响应，就需要适配器处理成方便用例和实体理解的格式（比如 json），然后从实体和用例获取输出，再处理成请求源能够识别的形式。\n基础架构（Infrastructure） 包含所有的 I/O 组件：UI、数据库、框架、设备等，是最易变化的层。\n依赖规则 简洁架构只有一个依赖规则：只有外层可以依赖内层。这意味着：\n领域必须是独立的 用例层依赖实体 外层可以依赖任何东西 当然这个规则是可以违反的。我们经常看到在领域层依赖第三方库。\n但不受控制的依赖关系会导致复杂和混乱的代码，如打破以来规则会导致：\n循环依赖，模块 A 依赖模块 B，B 依赖 C，C 依赖 A 测试性差，必须模拟整个系统来测试一小部分 耦合度太高 简洁架构的优势 领域分离\n每个领域的功能是独立，与应用层的耦合度变低，更易维护和测试。\n独立用例\n应用场景即用例是单独描述的。在用例中可以决定使用哪些第三方服务，即使更换第三方服务，也不会影响到其他层。\n可替换的三方服务\n由于适配器的存在，更换第三方服务变的简单。只要实现了适配器的接口，即可调用这个服务。\nMVC 类比 通常，没有了解过 DDD 领域驱动 的人都这些层次划分会很模糊，那么做一个 MVC 与简洁架构的类比会很有帮助：\n模型（Model）通常对应的是领域实体 控制器（Controller），通常还会有有个业务逻辑层（Logic），对应的是应用层。 试图（View）通常对应的是适配器 虽然细节上有所不同，但大体类似。这种类比可以快速帮助理解分层的意义。\n应用设计 我们的购物系统与各大商城类似。对于商城的设计，我们只关注主要部分：用户、商品、购物车和订单，而忽略次要部分：登录、校验和操作细节。\n想象一下，如果我们要买一副羽毛球拍，需要经历以下步骤：\n用户加入购物车 提交结算 生成未支付订单 支付完成 更新为已支付订单 删除购物车 设计领域 程序中最重要的是领域，它包含了应用程序的主要实体和数据转换。\n商城领域一般包含：\n实体数据：user, cart, order, product 数据的转换函数 转换函数只依赖于领域，比如：\n计算总成本的函数 检测产品库存 检查是否在购物车中 简要的领域设计如下图\n设计应用层 应用层包含用例。一个用例通常会有一个行为者（actor）或用户、一个动作（action）和一个响应。\n在这个商城中，我们可以将应用层区分为以下一个几个用例：\n商品购买场景 调用第三方支付场景 查看订单场景 用例通常以主题领域（subject area）的方式描述，其中商品购买场景有以下步骤：\n从购物车中检索商品并创建一个新的订单 订单付款 更新订单 通知用户 清除购物车 设计适配器层 适配器的作用是使第三方服务和我们的系统兼容。\n在服务端，适配器通常是数据库的连接、支付方式的调用、邮件的通知。\n系统设计结构 domain 是领域层\napplication 是应用层\nservices 是适配器层\n结构如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 architecture/ |-domain/ |-cart.go |-order.go |-user.go |-product.go |-application/ |-cart.go |-interface.go |-order.go |-orderProduct.go |-services/ |-notificationAdapter.go |-paymentAdapter.go 创建领域实体 领域中有 4 个模块：\n用户 产品 购物车 订单 用户是行为者，用户的实体包括：用户ID、姓名、邮箱等\n1 2 3 4 5 6 7 8 // domian/user.go package domain type User struct { ID int64 `json:\u0026#34;id\u0026#34;` Username string `json:\u0026#34;username\u0026#34;` Email string `json:\u0026#34;email\u0026#34;` } 产品包括：产品ID、名称、价格等\n1 2 3 4 5 6 7 8 // domain/product.go package domain type Product struct { ID int64 `json:\u0026#34;id\u0026#34;` Name string `json:\u0026#34;name\u0026#34;` Price int64 `json:\u0026#34;price\u0026#34;` } 购物车包括：ID、用户ID、产品信息\n1 2 3 4 5 6 7 8 // domain/cart.go package domain type Cart struct { ID int64 `json:\u0026#34;id\u0026#34;` UserID int64 `json:\u0026#34;user_id\u0026#34;` Products []*Product `json:\u0026#34;products\u0026#34;` } 订单包括：订单ID、用户ID、产品信息、状态\n1 2 3 4 5 6 7 8 9 // domain/order.go package domain type Order struct { ID int64 `json:\u0026#34;id\u0026#34;` UserID int64 `json:\u0026#34;user_id\u0026#34;` Products []*Product `json:\u0026#34;products\u0026#34;` Status int64 `json:\u0026#34;status\u0026#34;` } 创建数据转换 注意：以下只是代码的简写，与业务无关。\n购物车实体的 Contains 和 AddProduct 用于检查物品是否在购物车中和向购物车添加商品。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 func (c *Cart) Contains(product Product) (bool, error) { for _, p := range c.Products { if p.ID == product.ID { return true, nil } } return false, nil } func GetCart(userID int64) (Cart, error) { return Cart{}, nil } func (c *Cart) AddProduct(product Product) (bool, error) { has, _ := c.Contains(product) if has { c.Products = append(c.Products, product) } else { // 有就更新 for i, p := range c.Products { if p.ID == product.ID { c.Products[i] = product } } } return true, nil } 计算商品列表的总价格\n1 2 3 4 5 6 7 8 // domain/product.go func TotalPrice(products []*Product) int64 { var totalPrice int64 for _, product := range products { totalPrice += product.Price } return totalPrice } 创建订单：\n1 2 3 4 5 6 7 8 // domain/order.go func CreateOrder(user *User, products []*Product) (Order, error) { var order Order order.UserID = user.ID order.TotalPrice = TotalPrice(products) order.Status = 0 return order, nil } 创建应用层 我们已经创建了领域层，接下来可以创建应用层了。\n在订单方面，我们需要传递用户信息和产品信息，将两者绑定：\n1 2 3 4 5 6 7 8 // application/orderProduct.go package application import ( \u0026#34;clean/domain\u0026#34; ) type OrderProducts func(*domain.User, []*domain.Product) (*domain.Order, error) 正常情况下，不应当采用两个单独的参数，而应当将所有的参数封装在内部，这个情况在实际的业务开发中要注意。\n购物车方面，在用户执行添加到购物车操作时，有以下步骤：\n获取购物车 检查购车是否已该商品 更新购物车 1 2 3 4 5 6 7 8 9 10 // application/cart.go func AddToCart(userID int64, productID int64) (bool, error) { var product domain.Product product.ID = productID cart, _ := domain.GetCart(userID) _, _ = cart.AddProduct(product) return true, nil } 生成一个订单：\n1 2 3 4 5 6 func CreateOrder(user *domain.User) (*domain.Order, error) { cart, _ := domain.GetCart(user.ID) order, _ := domain.CreateOrder(user, cart.Products) return \u0026amp;order, nil } 支付和发送通知接口：\n1 2 3 4 5 6 7 8 9 10 // application/interface.go import \u0026#34;clean/domain\u0026#34; func Pay(order *domain.Order) { services.Pay(order.TotalPrice) } func Notify(user *domain.User, message string) { services.SendEmail(user.Email, message) } 创建适配器 支付服务接口：\n1 2 3 4 // services/paymentAdapter.go func Pay(price int64) { // request Payment Server } 通知服务接口：\n1 2 3 4 // services/paymentAdapter.go func SendEmail(email, message string) { // request Mail Server } 数据流程图 用户请求到应用层，应用层会自动调用外部服务。主要逻辑和数据都在领域层中。\n所有的外部服务都隐藏在基础架构中，如果我们需要修改消息发送方式，只需要修改适配器即可。\n总结 本文介绍了简洁架构的分层、与 MVC 开发模式的概念替换以及一个基本满足简洁架构的应用设计。\n实际项目中的情况会更复杂，最主要的问题是我们对领域的了解不足。判断模块属于哪一层非常重要，关注点在于职责分离。\n本文参考转文：【译】前端简洁架构\n参考： Public Talk about Clean Architecture on Frontend Slides for the Talk The source code for the application we\u0026rsquo;re going to design Sample of a working application 设计实践 The Clean Architecture Model-View-Controller DDD, Hexagonal, Onion, Clean, CQRS, … How I put it all together Ports \u0026amp; Adapters Architecture More than Concentric Layers Generating Trees Using L-Systems, TypeScript, and OOP Series\u0026rsquo; Articles 系统设计 Domain Knowledge Use Case Coupling and cohesion Shared Kernel Analysis Paralysis ","date":"2023-12-10T11:02:05+08:00","image":"https://stridedot.github.io/p/clean-architecture/hexagonal-architecture_hu19de147859b112cdb21cb6656b6db9ea_208481_120x120_fill_box_smart1_3.png","permalink":"https://stridedot.github.io/p/clean-architecture/","title":"简洁架构"},{"content":"Hugo 是个用于构建静态网站的快速、现代且灵活的开源静态站点生成器。 它使用 Go 语言编写，以极快的速度生成静态网页，支持简单易懂的文件结构、主题和模板。 Hugo 注重性能，使得用户能够在几秒内生成整个网站，它会将你使用 markdown 编写的内容转换成 HTML 文件。 适用于用于个人博客和企业网站。\nStep 1: Fork hugo 进入 hugo 页面，点击 fork，hugo 项目将同步到自己的 github 账户中。\nStep 2: Git Clone 执行 git clone 命令\n1 $ git clone https://gitclone.com/github.com/stridedot/hugo.git --depth=1 如果 clone 比较慢，可以在修改\nhttps://github.com/stridedot/hugo.git --depth=1\n为\nhttps://gitclone.com/github.com/stridedot/hugo.git --depth=1\n来加快下载速度\nStep 3: 安装依赖 进入 hugo 文件并 install\n1 2 $ cd hugo $ go install Step 4: 编译 1 $ go build -o D:/software/Hugo/bin/hugo.exe main.go Step 5: 加入环境变量 点击开始菜单，搜索“环境变量”即可看到\n我们的 hugo 可执行文件是 D:/software/Hugo/bin/hugo.exe 。\nStep 6: 测试 hugo 1 2 $ hugo version hugo v0.121.0-DEV windows/amd64 BuildDate=unknown ","date":"2022-11-09T00:00:00Z","permalink":"https://stridedot.github.io/p/install-hugo/","title":"hugo 的安装与使用"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://stridedot.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://stridedot.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://stridedot.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://stridedot.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode Vimeo Simple Shortcode bilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","permalink":"https://stridedot.github.io/p/rich-content/","title":"Rich Content"},{"content":"فقرة 1 هذا النص هو مثال لنص يمكن أن يستبدل في نفس المساحة، لقد تم توليد هذا النص من مولد النص العربى، حيث يمكنك أن تولد مثل هذا النص أو العديد من النصوص الأخرى إضافة إلى زيادة عدد الحروف التى يولدها التطبيق. إذا كنت تحتاج إلى عدد أكبر من الفقرات يتيح لك مولد النص العربى زيادة عدد الفقرات كما تريد، النص لن يبدو مقسما ولا يحوي أخطاء لغوية، مولد النص العربى مفيد لمصممي المواقع على وجه الخصوص، حيث يحتاج العميل فى كثير من الأحيان أن يطلع على صورة حقيقية لتصميم الموقع. ومن هنا وجب على المصمم أن يضع نصوصا مؤقتة على التصميم ليظهر للعميل الشكل كاملاً،دور مولد النص العربى أن يوفر على المصمم عناء البحث عن نص بديل لا علاقة له بالموضوع الذى يتحدث عنه التصميم فيظهر بشكل لا يليق. هذا النص يمكن أن يتم تركيبه على أي تصميم دون مشكلة فلن يبدو وكأنه نص منسوخ، غير منظم، غير منسق، أو حتى غير مفهوم. لأنه مازال نصاً بديلاً ومؤقتاً.\nفقرة 2 هذا النص هو مثال لنص يمكن أن يستبدل في نفس المساحة، لقد تم توليد هذا النص من مولد النص العربى، حيث يمكنك أن تولد مثل هذا النص أو العديد من النصوص الأخرى إضافة إلى زيادة عدد الحروف التى يولدها التطبيق. إذا كنت تحتاج إلى عدد أكبر من الفقرات يتيح لك مولد النص العربى زيادة عدد الفقرات كما تريد، النص لن يبدو مقسما ولا يحوي أخطاء لغوية، مولد النص العربى مفيد لمصممي المواقع على وجه الخصوص، حيث يحتاج العميل فى كثير من الأحيان أن يطلع على صورة حقيقية لتصميم الموقع. ومن هنا وجب على المصمم أن يضع نصوصا مؤقتة على التصميم ليظهر للعميل الشكل كاملاً،دور مولد النص العربى أن يوفر على المصمم عناء البحث عن نص بديل لا علاقة له بالموضوع الذى يتحدث عنه التصميم فيظهر بشكل لا يليق. هذا النص يمكن أن يتم تركيبه على أي تصميم دون مشكلة فلن يبدو وكأنه نص منسوخ، غير منظم، غير منسق، أو حتى غير مفهوم. لأنه مازال نصاً بديلاً ومؤقتاً.\nتجربة RTL كلمة 1 Text كلمة 2\n","date":"2019-03-09T00:00:00Z","image":"https://stridedot.github.io/p/%D9%85%D8%AB%D8%A7%D9%84-%D9%86%D8%B5/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://stridedot.github.io/p/%D9%85%D8%AB%D8%A7%D9%84-%D9%86%D8%B5/","title":"مثال نص"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://stridedot.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://stridedot.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://stridedot.github.io/p/emoji-support/","title":"Emoji Support"}]